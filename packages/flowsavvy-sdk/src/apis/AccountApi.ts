/* tslint:disable */
/* eslint-disable */
/**
 * FlowSavvy API
 * API for managing tasks, events, and schedules on FlowSavvy.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiAccountLoginPost200Response,
} from '../models/index';
import {
    ApiAccountLoginPost200ResponseFromJSON,
    ApiAccountLoginPost200ResponseToJSON,
} from '../models/index';

export interface ApiAccountLoginPostRequest {
    email: string;
    password: string;
    clientTimeZone?: string;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * Logs in a user
     */
    async apiAccountLoginPostRaw(requestParameters: ApiAccountLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiAccountLoginPost200Response>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling apiAccountLoginPost().'
            );
        }

        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling apiAccountLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-csrf-token"] = await this.configuration.apiKey("x-csrf-token"); // csrfTokenHeader authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['email'] != null) {
            formParams.append('Email', requestParameters['email'] as any);
        }

        if (requestParameters['password'] != null) {
            formParams.append('Password', requestParameters['password'] as any);
        }

        if (requestParameters['clientTimeZone'] != null) {
            formParams.append('clientTimeZone', requestParameters['clientTimeZone'] as any);
        }

        const response = await this.request({
            path: `/api/Account/Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiAccountLoginPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Logs in a user
     */
    async apiAccountLoginPost(requestParameters: ApiAccountLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiAccountLoginPost200Response> {
        const response = await this.apiAccountLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
