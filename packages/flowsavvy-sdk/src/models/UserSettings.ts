/* tslint:disable */
/* eslint-disable */
/**
 * FlowSavvy API
 * API for managing tasks, events, and schedules on FlowSavvy.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserSettings
 */
export interface UserSettings {
    /**
     * 
     * @type {boolean}
     * @memberof UserSettings
     */
    autoRecalculate?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserSettings
     */
    workloadDistribution?: string;
    /**
     * 
     * @type {number}
     * @memberof UserSettings
     */
    bufferDays?: number;
    /**
     * 
     * @type {number}
     * @memberof UserSettings
     */
    weeksAhead?: number;
    /**
     * 
     * @type {number}
     * @memberof UserSettings
     */
    weekStartType?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UserSettings
     */
    use24HourTime?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserSettings
     */
    showCompletedTasks?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserSettings
     */
    timeZoneDefault?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSettings
     */
    timeZone?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserSettings
     */
    detectTimeZoneChanges?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserSettings
     */
    theme?: string;
}

/**
 * Check if a given object implements the UserSettings interface.
 */
export function instanceOfUserSettings(value: object): value is UserSettings {
    return true;
}

export function UserSettingsFromJSON(json: any): UserSettings {
    return UserSettingsFromJSONTyped(json, false);
}

export function UserSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSettings {
    if (json == null) {
        return json;
    }
    return {
        
        'autoRecalculate': json['autoRecalculate'] == null ? undefined : json['autoRecalculate'],
        'workloadDistribution': json['workloadDistribution'] == null ? undefined : json['workloadDistribution'],
        'bufferDays': json['bufferDays'] == null ? undefined : json['bufferDays'],
        'weeksAhead': json['weeksAhead'] == null ? undefined : json['weeksAhead'],
        'weekStartType': json['weekStartType'] == null ? undefined : json['weekStartType'],
        'use24HourTime': json['use24HourTime'] == null ? undefined : json['use24HourTime'],
        'showCompletedTasks': json['showCompletedTasks'] == null ? undefined : json['showCompletedTasks'],
        'timeZoneDefault': json['timeZoneDefault'] == null ? undefined : json['timeZoneDefault'],
        'timeZone': json['timeZone'] == null ? undefined : json['timeZone'],
        'detectTimeZoneChanges': json['detectTimeZoneChanges'] == null ? undefined : json['detectTimeZoneChanges'],
        'theme': json['theme'] == null ? undefined : json['theme'],
    };
}

export function UserSettingsToJSON(json: any): UserSettings {
    return UserSettingsToJSONTyped(json, false);
}

export function UserSettingsToJSONTyped(value?: UserSettings | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'autoRecalculate': value['autoRecalculate'],
        'workloadDistribution': value['workloadDistribution'],
        'bufferDays': value['bufferDays'],
        'weeksAhead': value['weeksAhead'],
        'weekStartType': value['weekStartType'],
        'use24HourTime': value['use24HourTime'],
        'showCompletedTasks': value['showCompletedTasks'],
        'timeZoneDefault': value['timeZoneDefault'],
        'timeZone': value['timeZone'],
        'detectTimeZoneChanges': value['detectTimeZoneChanges'],
        'theme': value['theme'],
    };
}

