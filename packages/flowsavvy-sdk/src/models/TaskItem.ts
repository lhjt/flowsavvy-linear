/* tslint:disable */
/* eslint-disable */
/**
 * FlowSavvy API
 * API for managing tasks, events, and schedules on FlowSavvy.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TaskItem
 */
export interface TaskItem {
    /**
     * Comma-separated string of tag IDs for create/update.
     * @type {string}
     * @memberof TaskItem
     */
    tagIds?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TaskItem
     */
    completed?: boolean;
    /**
     * 
     * @type {number}
     * @memberof TaskItem
     */
    accessLevel?: number;
    /**
     * Resolved color of the item (e.g., "red", "green").
     * @type {string}
     * @memberof TaskItem
     */
    color?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof TaskItem
     */
    changed?: boolean;
    /**
     * 
     * @type {Array<object>}
     * @memberof TaskItem
     */
    upstreamItemInfos?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof TaskItem
     */
    downstreamItemInfos?: Array<object>;
    /**
     * 
     * @type {Date}
     * @memberof TaskItem
     */
    sortTime?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof TaskItem
     */
    parentItemID?: number | null;
    /**
     * 
     * @type {object}
     * @memberof TaskItem
     */
    parentItem?: object | null;
    /**
     * 
     * @type {Date}
     * @memberof TaskItem
     */
    lastMovedUtc?: Date;
    /**
     * Item ID. 0 for new items.
     * @type {number}
     * @memberof TaskItem
     */
    id?: number;
    /**
     * Instance ID of the item, if applicable.
     * @type {number}
     * @memberof TaskItem
     */
    instanceID?: number;
    /**
     * Notes for the item.
     * @type {string}
     * @memberof TaskItem
     */
    notes?: string;
    /**
     * Due date and time for the item.
     * @type {Date}
     * @memberof TaskItem
     */
    dueDateTime?: Date | null;
    /**
     * Start date and time for the item.
     * @type {Date}
     * @memberof TaskItem
     */
    startDateTime?: Date;
    /**
     * End date and time for the item.
     * @type {Date}
     * @memberof TaskItem
     */
    endDateTime?: Date;
    /**
     * Do not start until this date and time.
     * @type {Date}
     * @memberof TaskItem
     */
    dontStartUntil?: Date;
    /**
     * Timezone for the item.
     * @type {string}
     * @memberof TaskItem
     */
    timeZone?: string;
    /**
     * Whether the item is auto-ignored.
     * @type {boolean}
     * @memberof TaskItem
     */
    isAutoIgnored?: boolean;
    /**
     * Title of the item.
     * @type {string}
     * @memberof TaskItem
     */
    title?: string;
    /**
     * Type of the item (e.g., task, event).
     * @type {string}
     * @memberof TaskItem
     */
    itemType?: string;
    /**
     * Progress in hours.
     * @type {number}
     * @memberof TaskItem
     */
    progressHours?: number;
    /**
     * Progress in minutes.
     * @type {number}
     * @memberof TaskItem
     */
    progressMinutes?: number;
    /**
     * Minimum length of the item in total minutes.
     * @type {number}
     * @memberof TaskItem
     */
    minLengthTotalMinutes?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskItem
     */
    bufferTimeBeforeHours?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskItem
     */
    bufferTimeBeforeMinutes?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskItem
     */
    bufferTimeAfterHours?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskItem
     */
    bufferTimeAfterMinutes?: number;
    /**
     * Whether the item marks time as busy.
     * @type {boolean}
     * @memberof TaskItem
     */
    busy?: boolean;
    /**
     * Whether the item has a fixed time.
     * @type {boolean}
     * @memberof TaskItem
     */
    fixedTime?: boolean;
    /**
     * Whether the item is an all-day event.
     * @type {boolean}
     * @memberof TaskItem
     */
    allDay?: boolean;
    /**
     * Repeat type (e.g., Never, Daily, Weekly, Yearly).
     * @type {string}
     * @memberof TaskItem
     */
    repeatType?: string;
    /**
     * 
     * @type {number}
     * @memberof TaskItem
     */
    interval?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TaskItem
     */
    sunday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TaskItem
     */
    monday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TaskItem
     */
    tuesday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TaskItem
     */
    wednesday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TaskItem
     */
    thursday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TaskItem
     */
    friday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TaskItem
     */
    saturday?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TaskItem
     */
    monthlyType?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskItem
     */
    dates?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TaskItem
     */
    monthOrdinal?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskItem
     */
    weekDay?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskItem
     */
    endRepeatType?: string;
    /**
     * 
     * @type {Date}
     * @memberof TaskItem
     */
    endRepeatDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof TaskItem
     */
    numOccurrences?: number;
    /**
     * Priority of the item.
     * @type {number}
     * @memberof TaskItem
     */
    priority?: number;
    /**
     * Custom color for the item (hex code).
     * @type {string}
     * @memberof TaskItem
     */
    customColor?: string | null;
    /**
     * ID of the calendar this item belongs to.
     * @type {number}
     * @memberof TaskItem
     */
    calendarId?: number;
    /**
     * ID of the time profile associated with this item.
     * @type {number}
     * @memberof TaskItem
     */
    timeProfileId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TaskItem
     */
    location?: string | null;
}

/**
 * Check if a given object implements the TaskItem interface.
 */
export function instanceOfTaskItem(value: object): value is TaskItem {
    return true;
}

export function TaskItemFromJSON(json: any): TaskItem {
    return TaskItemFromJSONTyped(json, false);
}

export function TaskItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskItem {
    if (json == null) {
        return json;
    }
    return {
        
        'tagIds': json['tagIds'] == null ? undefined : json['tagIds'],
        'completed': json['Completed'] == null ? undefined : json['Completed'],
        'accessLevel': json['AccessLevel'] == null ? undefined : json['AccessLevel'],
        'color': json['Color'] == null ? undefined : json['Color'],
        'changed': json['Changed'] == null ? undefined : json['Changed'],
        'upstreamItemInfos': json['upstreamItemInfos'] == null ? undefined : json['upstreamItemInfos'],
        'downstreamItemInfos': json['downstreamItemInfos'] == null ? undefined : json['downstreamItemInfos'],
        'sortTime': json['SortTime'] == null ? undefined : (new Date(json['SortTime'])),
        'parentItemID': json['ParentItemID'] == null ? undefined : json['ParentItemID'],
        'parentItem': json['ParentItem'] == null ? undefined : json['ParentItem'],
        'lastMovedUtc': json['LastMovedUtc'] == null ? undefined : (new Date(json['LastMovedUtc'])),
        'id': json['id'] == null ? undefined : json['id'],
        'instanceID': json['InstanceID'] == null ? undefined : json['InstanceID'],
        'notes': json['Notes'] == null ? undefined : json['Notes'],
        'dueDateTime': json['DueDateTime'] == null ? undefined : (new Date(json['DueDateTime'])),
        'startDateTime': json['StartDateTime'] == null ? undefined : (new Date(json['StartDateTime'])),
        'endDateTime': json['EndDateTime'] == null ? undefined : (new Date(json['EndDateTime'])),
        'dontStartUntil': json['DontStartUntil'] == null ? undefined : (new Date(json['DontStartUntil'])),
        'timeZone': json['TimeZone'] == null ? undefined : json['TimeZone'],
        'isAutoIgnored': json['IsAutoIgnored'] == null ? undefined : json['IsAutoIgnored'],
        'title': json['Title'] == null ? undefined : json['Title'],
        'itemType': json['ItemType'] == null ? undefined : json['ItemType'],
        'progressHours': json['ProgressHours'] == null ? undefined : json['ProgressHours'],
        'progressMinutes': json['ProgressMinutes'] == null ? undefined : json['ProgressMinutes'],
        'minLengthTotalMinutes': json['minLengthTotalMinutes'] == null ? undefined : json['minLengthTotalMinutes'],
        'bufferTimeBeforeHours': json['BufferTimeBeforeHours'] == null ? undefined : json['BufferTimeBeforeHours'],
        'bufferTimeBeforeMinutes': json['BufferTimeBeforeMinutes'] == null ? undefined : json['BufferTimeBeforeMinutes'],
        'bufferTimeAfterHours': json['BufferTimeAfterHours'] == null ? undefined : json['BufferTimeAfterHours'],
        'bufferTimeAfterMinutes': json['BufferTimeAfterMinutes'] == null ? undefined : json['BufferTimeAfterMinutes'],
        'busy': json['Busy'] == null ? undefined : json['Busy'],
        'fixedTime': json['FixedTime'] == null ? undefined : json['FixedTime'],
        'allDay': json['AllDay'] == null ? undefined : json['AllDay'],
        'repeatType': json['RepeatType'] == null ? undefined : json['RepeatType'],
        'interval': json['Interval'] == null ? undefined : json['Interval'],
        'sunday': json['Sunday'] == null ? undefined : json['Sunday'],
        'monday': json['Monday'] == null ? undefined : json['Monday'],
        'tuesday': json['Tuesday'] == null ? undefined : json['Tuesday'],
        'wednesday': json['Wednesday'] == null ? undefined : json['Wednesday'],
        'thursday': json['Thursday'] == null ? undefined : json['Thursday'],
        'friday': json['Friday'] == null ? undefined : json['Friday'],
        'saturday': json['Saturday'] == null ? undefined : json['Saturday'],
        'monthlyType': json['MonthlyType'] == null ? undefined : json['MonthlyType'],
        'dates': json['Dates'] == null ? undefined : json['Dates'],
        'monthOrdinal': json['MonthOrdinal'] == null ? undefined : json['MonthOrdinal'],
        'weekDay': json['WeekDay'] == null ? undefined : json['WeekDay'],
        'endRepeatType': json['EndRepeatType'] == null ? undefined : json['EndRepeatType'],
        'endRepeatDate': json['EndRepeatDate'] == null ? undefined : (new Date(json['EndRepeatDate'])),
        'numOccurrences': json['NumOccurrences'] == null ? undefined : json['NumOccurrences'],
        'priority': json['priority'] == null ? undefined : json['priority'],
        'customColor': json['customColor'] == null ? undefined : json['customColor'],
        'calendarId': json['calendarId'] == null ? undefined : json['calendarId'],
        'timeProfileId': json['timeProfileId'] == null ? undefined : json['timeProfileId'],
        'location': json['Location'] == null ? undefined : json['Location'],
    };
}

export function TaskItemToJSON(json: any): TaskItem {
    return TaskItemToJSONTyped(json, false);
}

export function TaskItemToJSONTyped(value?: TaskItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'tagIds': value['tagIds'],
        'Completed': value['completed'],
        'AccessLevel': value['accessLevel'],
        'Color': value['color'],
        'Changed': value['changed'],
        'upstreamItemInfos': value['upstreamItemInfos'],
        'downstreamItemInfos': value['downstreamItemInfos'],
        'SortTime': value['sortTime'] == null ? undefined : ((value['sortTime'] as any).toISOString()),
        'ParentItemID': value['parentItemID'],
        'ParentItem': value['parentItem'],
        'LastMovedUtc': value['lastMovedUtc'] == null ? undefined : ((value['lastMovedUtc']).toISOString()),
        'id': value['id'],
        'InstanceID': value['instanceID'],
        'Notes': value['notes'],
        'DueDateTime': value['dueDateTime'] == null ? undefined : ((value['dueDateTime'] as any).toISOString()),
        'StartDateTime': value['startDateTime'] == null ? undefined : ((value['startDateTime']).toISOString()),
        'EndDateTime': value['endDateTime'] == null ? undefined : ((value['endDateTime']).toISOString()),
        'DontStartUntil': value['dontStartUntil'] == null ? undefined : ((value['dontStartUntil']).toISOString()),
        'TimeZone': value['timeZone'],
        'IsAutoIgnored': value['isAutoIgnored'],
        'Title': value['title'],
        'ItemType': value['itemType'],
        'ProgressHours': value['progressHours'],
        'ProgressMinutes': value['progressMinutes'],
        'minLengthTotalMinutes': value['minLengthTotalMinutes'],
        'BufferTimeBeforeHours': value['bufferTimeBeforeHours'],
        'BufferTimeBeforeMinutes': value['bufferTimeBeforeMinutes'],
        'BufferTimeAfterHours': value['bufferTimeAfterHours'],
        'BufferTimeAfterMinutes': value['bufferTimeAfterMinutes'],
        'Busy': value['busy'],
        'FixedTime': value['fixedTime'],
        'AllDay': value['allDay'],
        'RepeatType': value['repeatType'],
        'Interval': value['interval'],
        'Sunday': value['sunday'],
        'Monday': value['monday'],
        'Tuesday': value['tuesday'],
        'Wednesday': value['wednesday'],
        'Thursday': value['thursday'],
        'Friday': value['friday'],
        'Saturday': value['saturday'],
        'MonthlyType': value['monthlyType'],
        'Dates': value['dates'],
        'MonthOrdinal': value['monthOrdinal'],
        'WeekDay': value['weekDay'],
        'EndRepeatType': value['endRepeatType'],
        'EndRepeatDate': value['endRepeatDate'] == null ? undefined : ((value['endRepeatDate']).toISOString()),
        'NumOccurrences': value['numOccurrences'],
        'priority': value['priority'],
        'customColor': value['customColor'],
        'calendarId': value['calendarId'],
        'timeProfileId': value['timeProfileId'],
        'Location': value['location'],
    };
}

